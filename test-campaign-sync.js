#!/usr/bin/env node

/**
 * Test de synchronisation des campagnes
 * Ce script teste que les campagnes sont bien sauvegard√©es et r√©cup√©r√©es
 */

const http = require('http');

const API_BASE = 'http://localhost:3001';

// Fonction pour faire des requ√™tes HTTP
function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3001,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const parsed = JSON.parse(body);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function testCampaignSync() {
  console.log('üß™ Test de synchronisation des campagnes...\n');

  try {
    // 1. V√©rifier que le serveur est accessible
    console.log('1Ô∏è‚É£ V√©rification de l\'acc√®s au serveur...');
    const healthCheck = await makeRequest('/health');
    if (healthCheck.status !== 200) {
      throw new Error(`Serveur non accessible: ${healthCheck.status}`);
    }
    console.log('‚úÖ Serveur accessible\n');

    // 2. R√©cup√©rer les campagnes existantes
    console.log('2Ô∏è‚É£ R√©cup√©ration des campagnes existantes...');
    const existingCampaigns = await makeRequest('/campaigns');
    console.log(`üìä Nombre de campagnes existantes: ${Array.isArray(existingCampaigns.data) ? existingCampaigns.data.length : 0}`);
    
    if (Array.isArray(existingCampaigns.data)) {
      existingCampaigns.data.forEach((campaign, index) => {
        console.log(`   ${index + 1}. ${campaign.title} (ID: ${campaign.id})`);
      });
    }
    console.log('');

    // 3. Cr√©er une nouvelle campagne de test
    console.log('3Ô∏è‚É£ Cr√©ation d\'une nouvelle campagne de test...');
    const testCampaign = {
      title: `Test de synchronisation - ${new Date().toISOString()}`,
      organizer: 'Test Script',
      description: 'Campagne cr√©√©e pour tester la synchronisation',
      link: 'https://example.com',
      status: 'planned'
    };

    const createResult = await makeRequest('/campaigns', 'POST', testCampaign);
    if (createResult.status !== 201) {
      throw new Error(`Erreur lors de la cr√©ation: ${createResult.status}`);
    }
    
    const newCampaign = createResult.data;
    console.log(`‚úÖ Campagne cr√©√©e avec l'ID: ${newCampaign.id}`);
    console.log(`   Titre: ${newCampaign.title}`);
    console.log('');

    // 4. V√©rifier que la campagne est bien r√©cup√©rable
    console.log('4Ô∏è‚É£ V√©rification de la r√©cup√©ration de la campagne...');
    const getResult = await makeRequest(`/campaigns/${newCampaign.id}`);
    if (getResult.status !== 200) {
      throw new Error(`Erreur lors de la r√©cup√©ration: ${getResult.status}`);
    }
    
    const retrievedCampaign = getResult.data;
    console.log(`‚úÖ Campagne r√©cup√©r√©e: ${retrievedCampaign.title}`);
    console.log('');

    // 5. Modifier la campagne
    console.log('5Ô∏è‚É£ Modification de la campagne...');
    const updatedCampaign = {
      ...retrievedCampaign,
      title: `${retrievedCampaign.title} - MODIFI√âE`,
      description: 'Description modifi√©e pour tester la synchronisation'
    };

    const updateResult = await makeRequest(`/campaigns/${newCampaign.id}`, 'PUT', updatedCampaign);
    if (updateResult.status !== 200) {
      throw new Error(`Erreur lors de la modification: ${updateResult.status}`);
    }
    
    console.log(`‚úÖ Campagne modifi√©e: ${updateResult.data.title}`);
    console.log('');

    // 6. V√©rifier la liste mise √† jour
    console.log('6Ô∏è‚É£ V√©rification de la liste mise √† jour...');
    const updatedList = await makeRequest('/campaigns');
    const campaignCount = Array.isArray(updatedList.data) ? updatedList.data.length : 0;
    console.log(`üìä Nombre total de campagnes: ${campaignCount}`);
    
    const modifiedCampaign = updatedList.data.find(c => c.id === newCampaign.id);
    if (modifiedCampaign) {
      console.log(`‚úÖ Campagne trouv√©e dans la liste: ${modifiedCampaign.title}`);
    } else {
      console.log('‚ùå Campagne non trouv√©e dans la liste');
    }
    console.log('');

    // 7. Supprimer la campagne de test
    console.log('7Ô∏è‚É£ Suppression de la campagne de test...');
    const deleteResult = await makeRequest(`/campaigns/${newCampaign.id}`, 'DELETE');
    if (deleteResult.status !== 200) {
      console.log(`‚ö†Ô∏è Erreur lors de la suppression: ${deleteResult.status}`);
    } else {
      console.log('‚úÖ Campagne supprim√©e');
    }
    console.log('');

    console.log('üéâ Test de synchronisation termin√© avec succ√®s !');
    console.log('');
    console.log('üìã R√©sum√©:');
    console.log('   ‚úÖ Serveur accessible');
    console.log('   ‚úÖ Campagnes r√©cup√©r√©es');
    console.log('   ‚úÖ Campagne cr√©√©e');
    console.log('   ‚úÖ Campagne r√©cup√©r√©e');
    console.log('   ‚úÖ Campagne modifi√©e');
    console.log('   ‚úÖ Liste mise √† jour');
    console.log('   ‚úÖ Campagne supprim√©e');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.log('');
    console.log('üîß Solutions possibles:');
    console.log('   1. V√©rifiez que le serveur JSON est d√©marr√©: npm run db');
    console.log('   2. V√©rifiez que le port 3001 est libre');
    console.log('   3. V√©rifiez que le fichier db/db.json existe');
    process.exit(1);
  }
}

// Ex√©cuter le test
testCampaignSync();
